@page "/gerenciar-tipos-servico"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        <div class="container-fluid px-0">
            <!-- Cabeçalho com logo e nome do sistema -->
            @*<header class="bg-primary text-white py-3">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-md-2 col-sm-3 text-center text-sm-start mb-2 mb-sm-0">
                            <img src="images/logo-baixo-guandu.png" alt="Logo Baixo Guandú" class="img-fluid" style="max-height: 80px;" />
                        </div>
                        <div class="col-md-8 col-sm-6 text-center text-sm-start">
                            <h1 class="h3 mb-0">Serviços Baixo Guandú</h1>
                            <p class="mb-0 d-none d-sm-block">Gerenciamento de Tipos de Serviço</p>
                        </div>
                        <div class="col-md-2 col-sm-3 text-center text-sm-end mt-2 mt-sm-0">
                            <div class="dropdown">
                                <button class="btn btn-light dropdown-toggle" type="button" id="userMenu" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-person-circle me-1"></i> Nome
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userMenu">
                                    <li><a class="dropdown-item" href="/">Página Inicial</a></li>
                                    <li><a class="dropdown-item" href="/gerenciar-usuarios">Gerenciar Usuários</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><button class="dropdown-item" @onclick="Logout">Sair</button></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </header>*@

            <!-- Conteúdo principal - Gerenciamento de Tipos de Serviço -->
            <div class="container py-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Gerenciamento de Tipos de Serviço</h2>
                    <button class="btn btn-success" @onclick="() => AbrirModalTipoServico(null)">
                        <i class="bi bi-plus-circle me-1"></i> Novo Tipo de Serviço
                    </button>
                </div>

                @if (mensagemErro != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        @mensagemErro
                        <button type="button" class="btn-close" @onclick="() => mensagemErro = null" aria-label="Close"></button>
                    </div>
                }

                @if (mensagemSucesso != null)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        @mensagemSucesso
                        <button type="button" class="btn-close" @onclick="() => mensagemSucesso = null" aria-label="Close"></button>
                    </div>
                }

                <!-- Filtro -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-10">
                                <label for="filtroDescricao" class="form-label">Descrição</label>
                                <input type="text" class="form-control" id="filtroDescricao" @bind="filtroDescricao" placeholder="Filtrar por descrição..." />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button class="btn btn-primary w-100" @onclick="FiltrarTiposServico">
                                    <i class="bi bi-search me-1"></i> Filtrar
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tabela de Tipos de Serviço -->
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Código</th>
                                        <th>Descrição</th>
                                        <th>Profissionais Vinculados</th>
                                        <th>Ações</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (tiposServicoFiltrados.Count == 0)
                                    {
                                        <tr>
                                            <td colspan="4" class="text-center py-3">Nenhum tipo de serviço encontrado.</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var tipoServico in tiposServicoFiltrados)
                                        {
                                            <tr>
                                                <td>@tipoServico.TpServico</td>
                                                <td>@tipoServico.DsTpServico</td>
                                                <td>@(ContarProfissionaisPorTipoServico(tipoServico.TpServico))</td>
                                                <td>
                                                    <div class="btn-group">
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => AbrirModalTipoServico(tipoServico)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmarExclusao(tipoServico)" 
                                                                disabled="@(ContarProfissionaisPorTipoServico(tipoServico.TpServico) > 0)">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Modal de Edição/Criação de Tipo de Serviço -->
            @if (mostrarModalTipoServico)
            {
                <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">@(tipoServicoEmEdicao.TpServico == 0 ? "Novo Tipo de Serviço" : "Editar Tipo de Serviço")</h5>
                                <button type="button" class="btn-close" @onclick="FecharModalTipoServico" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="descricaoTipoServico" class="form-label">Descrição</label>
                                    <input type="text" class="form-control" id="descricaoTipoServico" @bind="tipoServicoEmEdicao.DsTpServico" required />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="FecharModalTipoServico">Cancelar</button>
                                <button type="button" class="btn btn-primary" @onclick="SalvarTipoServico">Salvar</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }

            <!-- Modal de Confirmação de Exclusão -->
            @if (mostrarModalConfirmacao)
            {
                <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Confirmar Exclusão</h5>
                                <button type="button" class="btn-close" @onclick="() => mostrarModalConfirmacao = false" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <p>Tem certeza que deseja excluir o tipo de serviço <strong>@(tipoServicoParaExcluir?.DsTpServico)</strong>?</p>
                                <p class="text-danger">Esta ação não pode ser desfeita.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" @onclick="() => mostrarModalConfirmacao = false">Cancelar</button>
                                <button type="button" class="btn btn-danger" @onclick="ExcluirTipoServico">Excluir</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-backdrop fade show"></div>
            }

            <!-- Rodapé -->
            <footer class="bg-dark text-white py-4 mt-5">
                <div class="container">
                    <div class="row">
                        <div class="col-md-6 mb-3 mb-md-0">
                            <h5>Serviços Baixo Guandú</h5>
                            <p class="mb-0">Conectando você aos melhores profissionais da cidade.</p>
                        </div>
                        <div class="col-md-6 text-md-end">
                            <p class="mb-0">&copy; 2025 Prefeitura de Baixo Guandú - ES</p>
                            <p class="mb-0 small">Todos os direitos reservados</p>
                        </div>
                    </div>
                </div>
            </footer>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container py-5 text-center">
            <div class="card shadow-sm mx-auto" style="max-width: 500px;">
                <div class="card-body p-5">
                    <i class="bi bi-shield-lock text-danger" style="font-size: 4rem;"></i>
                    <h2 class="mt-3">Acesso Restrito</h2>
                    <p class="text-muted">Você precisa estar autenticado para acessar esta página.</p>
                    <a href="/login" class="btn btn-primary mt-3">
                        <i class="bi bi-box-arrow-in-right me-2"></i> Fazer Login
                    </a>
                    <a href="/" class="btn btn-outline-secondary mt-3 ms-2">
                        <i class="bi bi-house me-2"></i> Página Inicial
                    </a>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<TipoServicoDTO> tiposServico = new List<TipoServicoDTO>();
    private List<TipoServicoDTO> tiposServicoFiltrados = new List<TipoServicoDTO>();
    private List<UsuarioDTO> usuarios = new List<UsuarioDTO>();

    private string filtroDescricao = "";
    
    private bool mostrarModalTipoServico = false;
    private bool mostrarModalConfirmacao = false;
    private TipoServicoDTO tipoServicoEmEdicao = new TipoServicoDTO();
    private TipoServicoDTO tipoServicoParaExcluir = null;

    private string mensagemErro = null;
    private string mensagemSucesso = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verificar autenticação (implementação real usaria JSInterop)
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "auth_token");
            if (string.IsNullOrEmpty(token))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Carregar dados
            await CarregarDados();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao inicializar: {ex.Message}";
        }
    }

    private async Task CarregarDados()
    {
        try
        {
            tiposServico = await Http.GetFromJsonAsync<List<TipoServicoDTO>>("api/TipoServico");
            usuarios = await Http.GetFromJsonAsync<List<UsuarioDTO>>("api/Usuario");

            FiltrarTiposServico();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar dados: {ex.Message}";
        }
    }

    private void FiltrarTiposServico()
    {
        tiposServicoFiltrados = tiposServico.Where(t => 
            string.IsNullOrEmpty(filtroDescricao) || 
            t.DsTpServico.ToLower().Contains(filtroDescricao.ToLower())
        ).ToList();
    }

    private int ContarProfissionaisPorTipoServico(int tipoServicoId)
    {
        return usuarios.Count(u => u.TpServico == tipoServicoId);
    }

    private void AbrirModalTipoServico(TipoServicoDTO tipoServico)
    {
        if (tipoServico == null)
        {
            // Novo tipo de serviço
            tipoServicoEmEdicao = new TipoServicoDTO();
        }
        else
        {
            // Editar tipo de serviço existente
            tipoServicoEmEdicao = new TipoServicoDTO
                {
                TpServico = tipoServico.TpServico,
                DsTpServico = tipoServico.DsTpServico
            };
        }
        
        mostrarModalTipoServico = true;
    }

    private void FecharModalTipoServico()
    {
        mostrarModalTipoServico = false;
    }

    private async Task SalvarTipoServico()
    {
        try
        {
            // Validações básicas
            if (string.IsNullOrEmpty(tipoServicoEmEdicao.DsTpServico))
            {
                mensagemErro = "A descrição do tipo de serviço é obrigatória.";
                return;
            }

            // Salvar tipo de serviço (na implementação real, usaria POST ou PUT para a API)
            if (tipoServicoEmEdicao.TpServico == 0)
            {
                // Novo tipo de serviço - simulação de POST
                tipoServicoEmEdicao.TpServico = tiposServico.Count > 0 ? tiposServico.Max(t => t.TpServico) + 1 : 1;
                tiposServico.Add(tipoServicoEmEdicao);
                mensagemSucesso = "Tipo de serviço criado com sucesso!";
            }
            else
            {
                // Atualizar tipo de serviço existente - simulação de PUT
                var index = tiposServico.FindIndex(t => t.TpServico == tipoServicoEmEdicao.TpServico);
                if (index >= 0)
                {
                    tiposServico[index] = tipoServicoEmEdicao;
                    mensagemSucesso = "Tipo de serviço atualizado com sucesso!";
                }
            }

            // Atualizar lista filtrada
            FiltrarTiposServico();
            
            // Fechar modal
            mostrarModalTipoServico = false;
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao salvar tipo de serviço: {ex.Message}";
        }
    }

    private void ConfirmarExclusao(TipoServicoDTO tipoServico)
    {
        // Verificar se existem profissionais vinculados
        if (ContarProfissionaisPorTipoServico(tipoServico.TpServico) > 0)
        {
            mensagemErro = "Não é possível excluir este tipo de serviço pois existem profissionais vinculados a ele.";
            return;
        }

        tipoServicoParaExcluir = tipoServico;
        mostrarModalConfirmacao = true;
    }

    private void ExcluirTipoServico()
    {
        try
        {
            if (tipoServicoParaExcluir != null)
            {
                // Verificar novamente se existem profissionais vinculados
                if (ContarProfissionaisPorTipoServico(tipoServicoParaExcluir.TpServico) > 0)
                {
                    mensagemErro = "Não é possível excluir este tipo de serviço pois existem profissionais vinculados a ele.";
                    mostrarModalConfirmacao = false;
                    tipoServicoParaExcluir = null;
                    return;
                }

                // Remover tipo de serviço (na implementação real, usaria DELETE para a API)
                tiposServico.RemoveAll(t => t.TpServico == tipoServicoParaExcluir.TpServico);
                
                // Atualizar lista filtrada
                FiltrarTiposServico();
                
                mensagemSucesso = "Tipo de serviço excluído com sucesso!";
            }
            
            // Fechar modal
            mostrarModalConfirmacao = false;
            tipoServicoParaExcluir = null;
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao excluir tipo de serviço: {ex.Message}";
        }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "auth_token");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "user_name");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "user_type");
        NavigationManager.NavigateTo("/", true);
    }
}
